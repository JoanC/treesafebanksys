#include "error_type.h"

typedef char* USER_NAME ;//用户名
typedef char*  USER_PWD;//密码
typedef  char* VRY_CODE;//验证码

//登陆系统

//登陆权限
//管理员,一般用户...
enum login_competence{
	admin,
	user
	//...other competence
};

enum login_err_type{
	login_no_err,
	login_user_not_eixt,
	login_pwd_not_correct,
	login_vry_not_correct,
	login_server_err
};

struct login_user_info{
	USER_NAME input_user_name;//用户名
	USER_PWD input_USER_PWDd;//用户密码
};

struct login_check_info{
	//用户从UI输入的信息
	login_user_info user_info;//用户名和密码
	VRY_CODE input_verify_code;//验证码
	VRY_CODE verify_code;//正确的(UI)生成的验证码
};

//一次登陆过程的信息记载
struct login_info{
	//用户权限
	login_competence compe;
	//用户名
	char* user_name;//用户名
	//...其他
	bool is_employee;//登陆的用户是否是雇员
	int cust_id;//如果是用户,那么用户id
	int employee_id;//如果是雇员,那么雇员的id
};

struct login_send{
	bool is_suceess;
	login_info login_info;
	int err_num;//错误号
	char* err_info;//错误信息
};

//模块1--登陆
/*********************************************************/
//模块 1.1 
//0.1 -- 网络接受部分
//以下部分由ducky完成
//通过soket从UI中取得输入信息
//信息以byte的形式传入_info,而结果为_rlt
void login_net_get_info(char* _info,bool* _rlt);
/********************************************************/
//以下由Jiraiya完成
//模块1.2
//0.2 -- 输入信息整合,将模块1的信息整理成sunni可见的信息
//与UI的交互层
//整合输入信息
//从网络上接受信息
void login_get_username(USER_NAME _name , char* _info);//从ui上获取用户名
void login_get_pwd(USER_PWD _pwd , char* _info);//获取密码
void login_get_input_verify(VRY_CODE _vry , char* _info);//获取输入的验证码
void login_get_verify(VRY_CODE _vry , char* _info);//获取正确的验证码
//整合总流程
void login_get_info(login_check_info* _check , char* _info);//获取待验证的信息
/*******************************************************/
//以下由sunni完成
//模块1.3
//0.3 -- 查询
//////////////////////////////
//根据0.2的username,进行查询(不要去比较值),并将查询结果存储在一个结构体login_user_info中
//如果没有查询到该用户,结果_rlt返回false

//这个查询可能有子过程,由sunni自行设计

void login_db_query(USER_NAME _user , login_user_info* _info , bool* _rlt);

/******************************************************/
//以下由Jiraiya完成
//模块1.4
//0.4 -- 验证
//根据0.2的整合信息和0.3的查询信息,进行验证
//成功说明登陆成功,否则失败,如果失败
bool login_check(login_check_info* _input , login_user_info* _db);
bool login_check_name(USER_NAME _input , USER_NAME _db);
bool login_check_pwd(USER_PWD _input , USER_PWD _db);
void login_check_vry(VRY_CODE _input , VRY_CODE _ui , login_err_type _type);

/******************************************************/
//以下由sunni完成
//模块1.5
//0.5 -- 如果登陆成功,根据正确的用户名密码,进行高级信息查询处理,
//并将登陆信息存入login_info
//如果成功,则进行该模块的处理

//具体的login_info就要看sunni怎么定了
void login_db_summery(login_user_info* _user_info , login_info* _info);

/******************************************************/
//以下有sunni完成
//模块1.6
//0.6 -- 如果登陆失败
//根据错误编码进行错误信息的查询
void login_db_err_query(login_err_type _err , char* _err_info);

/******************************************************/
//以下是Jiraiya完成
//整合发送信息
void login__summer_send_info(login_info* _info , login_send* _send);

/******************************************************/
//以下ducky完成
//发送信息
void login_send_info(login_send* _send);