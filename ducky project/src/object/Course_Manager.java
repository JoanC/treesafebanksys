package object;

import db_data_structure.Course;
import db_data_structure.SysParam;
import db_data_structure.enCourseSelType;
import dbquery.* ;

import java.util.Vector;


public class Course_Manager {
	//取得所有课程信息列表,用于在预选界面进行显示
	static public Vector<Course> getAllCourseList(){
		Vector<Course> allCourseList = null ;
				
		DBOperation dbo = new DBOperation() ;
		dbo.connectDB(dbConnectParam.driverName, dbConnectParam.url, dbConnectParam.userName, dbConnectParam.dbPwd) ;
		allCourseList = dbo.doQueryAllDistinctCourseName() ;
		/*do query*/
		dbo.disconnectDB() ;
		return allCourseList;
	}
	
	 //通过预选中的课程信息,查询相关的匹配数据列表
	//尚未测试
	 static public Vector<Course> getCourseListByName(String _course_name){
		 DebugClass.debug_info("Course_Manager", "query all courses which has name " + "'" + 
				 _course_name + "'" + "...");
		 DBOperation dbo = new DBOperation() ;
		 dbo.connectDB(dbConnectParam.driverName, dbConnectParam.url, dbConnectParam.userName, dbConnectParam.dbPwd) ;
		 Vector<Course> _result = dbo.doQuerybyCourseName(_course_name);
		 Vector<Course> _final_result = new Vector<Course>();
		 SysParam _sys = dbo.doQuerySysParam();
		if (_sys.getCourseSelType() == enCourseSelType.CST_FSFG) {
			//如果是先到先得,则进行数据的进一步清理
			for (int i = 0; i < _result.size(); ++i) {
				// 如果课程的容量未满才放到结果中
				 if(_result.elementAt(i).getCourse_current_seleted_num() < 
						 _result.elementAt(i).getCourse_volume()){
					 //如果已选人数小于课程容量,则添加到最终结果中
					 _final_result.add(_result.elementAt(i));
				 }
			}
		}
		else{
			dbo.disconnectDB() ;
			return _result;
		}
		 dbo.disconnectDB() ;
		 return _final_result;
	 }
}
